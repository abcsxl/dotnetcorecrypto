using System;
using System.Security.Cryptography;
using dotnetcorersa;
using dotnetcorecrypto;

namespace dotnetcorersa
{
    class Program
    {
        static void Main(string[] args)
        {
            R​SA​Parameters parms = new RSAParameters();

            RSA rsa = RSA.Create();
            rsa.KeySize = 1024;

            //parms = rsa.ExportParameters(true);

            //Console.WriteLine($"D:{parms.D.ByteArrayToHex()}");
            //Console.WriteLine($"DP:{parms.DP.ByteArrayToHex()}");
            //Console.WriteLine($"DQ:{parms.DQ.ByteArrayToHex()}");
            //Console.WriteLine($"Exponent:{parms.Exponent.ByteArrayToHex()}");
            //Console.WriteLine($"InverseQ:{parms.InverseQ.ByteArrayToHex()}");
            //Console.WriteLine($"Modulus:{parms.Modulus.ByteArrayToHex()}");
            //Console.WriteLine($"P:{parms.P.ByteArrayToHex()}");
            //Console.WriteLine($"Q:{parms.Q.ByteArrayToHex()}");

            //Console.WriteLine("------------------------------");

            parms.D = "4DB40EBC270702CB13A8CB1CF0F75E40B8335697E87CCB1A8CB92B77A2002699B39736BE6DFEBDA6C9059E3532168A6EB6DB7DA337C63D2F469DA83EA7309ABC9A8E66808C591D744C93A6FE1F5CB7EB39932DB86C701029DFF424469A12BA4973FA8C416BB860BFC17FA9A55978102AF5669239F918ABC6DCA5FC11D82B9D01".HexToByteArray();
            parms.DP = "BDC4FEA9C1957052BBB43DE56B5099D0E09B889AFEC2F1EE4546037A4C83ADE97A9A9BC2062024BC51229836E9224B2A19612BCC71E739C10FD0A3B7365C2261".HexToByteArray();
            parms.DQ = "BF8E8C7B38A0E04EF21BB4CAC67EEFC1082A53A0231C727383609404247CA11F182FC3111A8ABE0524FB9CC8DB3D1E5126B6613BB4D01043CCB2768AE49E7A89".HexToByteArray();
            parms.P = "E42BCFF4F4640C27DD80C681BC84C9F1A1588393041E6192E4A983CB441B1ED45B43FEB9B93B53CDEC7C2AB57E7B49CF42C2664F5595DD1624850B59E14A4F21".HexToByteArray();
            parms.Q = "C0D7BB75086E750F3048E30926DFEB9D3FBBE7D14729C8B9D24E44B1B72CBDCEFDD72DBABFAA4690105C9F842515218B6672021DB09C8FB8A36C98308DDAF817".HexToByteArray();
            parms.InverseQ = "8D5BB212BDFC259B8F73F569584DE3A59D8BF872BBA249F530B078604D3E12E18DF072E35AA268484DAB3FA9A08975534E6535827422F060B03E835600B116AA".HexToByteArray();
            parms.Modulus = "ABE123D7AE76144574BFBD2340FAA2DB3F516202D37D867984A56A3735420D9073FF65E716564C4A92B8003B4F8F28EEA062E2C8B6918C674DC5B8029F2F8A0E9DD0FD5B032956FE1D07748A37A5320CB28BAFC0746A2DE92D6DD0645BF63AD221410E3689808C4D35C3E83BCF05498B4D98267C8961D9FC18694C5FC96F13F7".HexToByteArray();
            parms.Exponent = "00010001".HexToByteArray();

            rsa.ImportParameters(parms);

            RSAEncryptionPadding padding = RSAEncryptionPadding.Pkcs1;
            byte[] data = "1122334455667788".HexToByteArray();
            //byte[] res = "5570F7E116222A32B1E5E3455CC0D414E75A56C3C54D76A4FAA397C2DB907874F0C2EBA4583BF60874BC9C7E4E1CF13E99015D9C3349505C0953614E1A874CAF9A9814CE00BD780942BEF0121F972ADD7C54C0E6E31BB4081AE37029AA3E4E36B60978C24F811DB1F60BB5171F37745722AF05E284AB59C1EAB8A49F4B67565B".HexToByteArray();
            //byte[] res = rsa.Encrypt("000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001122334455667788".HexToByteArray(), padding);
            // 320FE7F9F9BF0FCC76E11C34FAC23CA6C0F2B192D7C4908EE43D136F2E5922AEB716070DFCADAD748DC62DDD097C5534BB10424FE2BB105B2C95C53FF621C546DF98E5193DA5887E673C6D4152D3B279E2FE01CFA4CF86DB5A3FF52C506248A2EEA7BAB6EA607FA37B9422E2C1C5B2A3AE3D924ED5C13B558456BCEED8DD18AA
            byte[] res = rsa.Encrypt(data, padding);

            Console.WriteLine(res.ByteArrayToHex());
            Console.WriteLine("------------------------------");
            Console.WriteLine(rsa.Decrypt(res, padding).ByteArrayToHex());

            Console.ReadKey(true);
        }
    }
}